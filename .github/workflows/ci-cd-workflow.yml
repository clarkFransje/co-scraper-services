name: CI/CD Workflow

on:
  push:
    branches:
      - master

jobs:
  setup_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          matrix=$(find . -name pom.xml -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=matrix::${matrix}"

  build_and_test:
    needs: setup_matrix
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup_matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build and test ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn clean install

  sonarcloud:
    needs: build_and_test
    name: SonarCloud
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup_matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze ${{ matrix.service }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd ${{ matrix.service }}
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=clarkFransje_co-scraper-services

  build_and_push_docker_images:
    needs: build_and_test
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup_matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - name: Azure CLI Login
        run: az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.AZURE_REGISTRY }}
      - name: Build and push Docker image for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          docker build -t ${{ secrets.AZURE_REGISTRY }}.azurecr.io/${{ matrix.service }}:${{ github.sha }} .
          docker push ${{ secrets.AZURE_REGISTRY }}.azurecr.io/${{ matrix.service }}:${{ github.sha }}

  deploy_to_kubernetes:
    needs: build_and_push_docker_images
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Azure CLI Login
        run: az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
      - name: Get AKS credentials
        run: az aks get-credentials --resource-group co-scraper --name co-scraper
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'
      - name: Set Image Tags
        id: vars
        run: echo "TAG=${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Update Kubernetes Manifests
        run: |
          TAG=${{ env.TAG }}
          sed -i "s|image: ${{ secrets.AZURE_REGISTRY }}.azurecr.io/customer-service:.*|image: ${{ secrets.AZURE_REGISTRY }}.azurecr.io/customer-service:$TAG|" k8s-configs/deployments/customer-deployment.yaml
          sed -i "s|image: ${{ secrets.AZURE_REGISTRY }}.azurecr.io/product-service:.*|image: ${{ secrets.AZURE_REGISTRY }}.azurecr.io/product-service:$TAG|" k8s-configs/deployments/product-deployment.yaml
          sed -i "s|image: ${{ secrets.AZURE_REGISTRY }}.azurecr.io/customer-product-service:.*|image: ${{ secrets.AZURE_REGISTRY }}.azurecr.io/customer-product-service:$TAG|" k8s-configs/deployments/customer-product-deployment.yaml
          sed -i "s|image: ${{ secrets.AZURE_REGISTRY }}.azurecr.io/store-service:.*|image: ${{ secrets.AZURE_REGISTRY }}.azurecr.io/store-service:$TAG|" k8s-configs/deployments/store-deployment.yaml
      - name: Deploy to Kubernetes
        run: |
          for file in k8s-configs/deployments/*.yaml; do
            kubectl apply -f "$file"
          done
          for file in k8s-configs/config-maps/*.yaml; do
            kubectl apply -f "$file"
          done
          for file in k8s-configs/services/*.yaml; do
            kubectl apply -f "$file"
          done
          for file in k8s-configs/ingress/*.yaml; do
            kubectl apply -f "$file"
          done
          for file in k8s-configs/network-policies/*.yaml; do
            kubectl apply -f "$file"
          done
          kubectl apply -f k8s-configs/hpa-services.yaml