name: CI/CD Workflow

on:
  push:
    branches:
      - master

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - customer-service
          - product-service
          - customer-product-service
          - store-service
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build and test ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn clean install -DskipTests

  zap_scan:
    needs: build_and_test
    name: ZAP Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up ZAP working directory
        run: mkdir -p zap_work && chmod 777 zap_work
      - name: Pull ZAP Docker Image
        run: docker pull zaproxy/zap-stable
      - name: Run ZAP Baseline Scan
        run: |
          set +e
          docker run -v $(pwd)/zap_work:/zap/wrk/:rw --user root --network="host" zaproxy/zap-stable zap-baseline.py -t https://co-scraper.app -r zap_report.html
          exit_code=$?
          if [ $exit_code -ne 0 ] && [ $exit_code -ne 1 ]; then
            exit $exit_code
          fi
          set -e
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v2
        with:
          path: zap_work/zap_report.html
          name: zap-report

  build_and_push_docker_images:
    needs: zap_scan
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - customer-service
          - product-service
          - customer-product-service
          - store-service
    steps:
      - uses: actions/checkout@v2
      - name: Login to Digital Ocean Container Registry
        env:
          DOCKER_PASSWORD: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          DOCKER_USERNAME: ${{ secrets.DIGITALOCEAN_USERNAME }}
        run: echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin registry.digitalocean.com
      - name: Build and push Docker image for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          docker build -t registry.digitalocean.com/co-scraper-registry/${{ matrix.service }}:${{ github.sha }} .
          docker push registry.digitalocean.com/co-scraper-registry/${{ matrix.service }}:${{ github.sha }}

  deploy_to_kubernetes:
    needs: build_and_push_docker_images
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install doctl
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.107.0/doctl-1.107.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin
      - name: Authenticate with DigitalOcean
        run: doctl auth init -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Fetch Kubernetes Credentials
        run: doctl kubernetes cluster kubeconfig save co-scraper-cluster
      - name: Set Image Tags
        id: vars
        run: echo "TAG=${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Update Kubernetes Manifests
        run: |
          TAG=${{ env.TAG }}
          sed -i "s|image: registry.digitalocean.com/co-scraper-registry/customer-service:.*|image: registry.digitalocean.com/co-scraper-registry/customer-service:$TAG|" k8s-configs/deployments/customer-deployment.yaml
          sed -i "s|image: registry.digitalocean.com/co-scraper-registry/product-service:.*|image: registry.digitalocean.com/co-scraper-registry/product-service:$TAG|" k8s-configs/deployments/product-deployment.yaml
          sed -i "s|image: registry.digitalocean.com/co-scraper-registry/customer-product-service:.*|image: registry.digitalocean.com/co-scraper-registry/customer-product-service:$TAG|" k8s-configs/deployments/customer-product-deployment.yaml
          sed -i "s|image: registry.digitalocean.com/co-scraper-registry/store-service:.*|image: registry.digitalocean.com/co-scraper-registry/store-service:$TAG|" k8s-configs/deployments/store-deployment.yaml
      - name: Deploy to Kubernetes
        run: |
          for file in k8s-configs/deployments/*.yaml; do
            kubectl apply -f "$file"
          done
          for file in k8s-configs/config-maps/*.yaml; do
            kubectl apply -f "$file"
          done
          for file in k8s-configs/services/*.yaml; do
            kubectl apply -f "$file"
          done
          for file in k8s-configs/ingress/*.yaml; do
            kubectl apply -f "$file"
          done
          for file in k8s-configs/network-policies/*.yaml; do
            kubectl apply -f "$file"
          done
          kubectl apply -f k8s-configs/hpa-services.yaml
          kubectl apply -f k8s-configs/standard-storageclass.yaml